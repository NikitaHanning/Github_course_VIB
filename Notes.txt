Using Git & Github for collaborating on research projects:

1. Create a GitHub account and install Gitbash and Ungit. Then create a ssh-key with Gitbash and link it to your GitHub account. 
   For download links and detailled instructions, see the emails of the course.
2. Create a new folder that will become a repository.
3. Open Ungit via the command module ("ungit"). This is not a necessity, but creates a visual interface that makes the working process easier. 
4. In Ungit, set the path - at the top of the screen - to the correct destination folder. 
5. In Gitbash, go to the correct folder by using "cd *Documents/GitHub_course_VIB*".
6. In Gitbash, initiate the repository by using "git init".
7. In Ungit, refresh the path: you should now be able to see a repository and its files. 
8. In Gitbash, create an author identity using
	"git config --global user.email "nikita.hanning@gmail.com""
	"git config --global user.name "NikitaHanning""
9. In Gitbash, add files from the development area to the staging area
	"git add Notes.txt"
10. In Gitbash, commit the changes with a meaningful message
	"git commit -m "meaningful message""
11. In Ungit, you can now see a point on the timeline (first commit).
12. You can repeat these steps for new commits.




Commands:

git config --global user.email "xxx"		Add information about the user working on the station
git config --global user.name "xxx"		Add information about the user working on the station
git init					Start a repository
git add	xxx					Bring files to the staging area
git commit -m "xxx"				Fix the changed documents to the timeline, with a meaningful 
						message (why was it changed? How does this address the issue? Does
						the change have any effect? Are there limitations linked to the change? It
						is important to be descriptive! Don't focus on the lines that changed, because
						you can visualize this in other ways. Instead, focus on the WHY and HOW. Without
						the message, you get forced to write a message in a pop-up text editor. 
git log						See the history of all commits
git log -2					See only the last 2 commits
git checkout *hash*				Travel to another commit, potentially creating a new branch you can start working on
git checkout master				Travel back to the version you were working on, in the main branch (master branch)
git checkout HEAD~2				Travel backwards 2 commits from your relative position	
git rm xxx					Delete a file from the repository (needs to be commited afterwards)
git remote *name* *url*				Create a link with a remote respository such as GitHub
		
		


Notes about the commands:

In Ungit, you can commit changes without adding them to a staging area (simply by pushing the 'commit' button). This is useful, but
certain complex tasks cannot be done this way. Therefore, it is always good to be able to work with Gitbash itself, i.e. commands. You can
check the progress of your work in Ungit to see if you are doing things correctly.   

Git log gives you an overview of the commits. This will also show the person (ID + email) of the person making the commit. This is important
when collaborating with colleagues. Therefore, it is always necessary to be logged in when working with Gitbash. 

Git checkout allows you to show the past versions. Be aware! Changing the past can lead to confusion and issues, so better not try it out! You 
should just use the checkout to SEE what you changed. 




Conceptual notes:

Git creates a timeline that allows us to save different versions of files, and trace back changes (or even go back to them).
Each version will be saved using a "commit". GitHub is a backup of the different timelines (projects). 

Git = timemachine
Repository = timeline
GitHub = backup for the timelines


There are 4 conceptual areas where you can work with git:
1) your personal computer
   --> Developing area: folder where the project is developed. This is where we will develop the project, e.g. our working files.
   --> Local repository: this is where the 'timeline' is. This is where you save snapshots that will document the timeline. 
   --> Staging area: a channel connecting the developing area and the local repository.
2) another computer: 'remote repository'
	- a second computer in your office
	- computer of a colleague
	- GitHub! 




Working on a repository via GitHub:

1) Click on the button "new repository" on the top right of the screen
2) Fill in a title and description
	- README and .gitignore files are important!
		--> README describes the project, in as much detail as possible. For example, how to debug scripts, what is the project about, who is involved, ... You
		    can make this file as a txt-file in the local repository. 
				--> makeareadme.com/mind-reading provides inspiration for writing a good README text file. 
		--> .gitignore tells Git what NOT to store, such as big data files, backup files or intermediate files. These should not be commited to GitHub. There is
                    a limit of 100 MB per document. You can pay for larger files, up to 500 MB. It is recommended to only store files that need version control and that
		    are smaller. You can make a txt-file with the name '.gitignore' and add information about the files to exclude (as a list);
				--> *.csv		ignores csv
		    		--> !dataset.cbs	except this file
				--> #message		annotate the txt file
	- choose public/private according to own preferences
3) The local and remote repositories now need to be linked (via a bridge). Use
	"git remote add *name* *url*







